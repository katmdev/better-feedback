{"version":3,"sources":["firebase.js","Feelings.js","Form.js","MoreInfo.js","Modal.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Feelings","state","classNames","groupedFeelings","className","this","props","feelings","map","obj","existingFeeling","feeling","key","onClick","e","handleModal","handleMoreInfo","push","Component","Form","handleInputChange","setState","target","name","value","handleSubmit","preventDefault","userTeam","userFeeling","userInfo","userPositive","isPositive","database","ref","error","htmlFor","type","placeholder","onChange","id","MoreInfo","Modal","displayForm","App","displayModal","handleForm","console","log","on","response","newFeelings","data","val","results","team","info","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a06a53d1.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCpMVERGQ9vc_YjTen_5P4dEq8h7WDS85E\",\n    authDomain: \"better-feedback-b409e.firebaseapp.com\",\n    databaseURL: \"https://better-feedback-b409e.firebaseio.com\",\n    projectId: \"better-feedback-b409e\",\n    storageBucket: \"better-feedback-b409e.appspot.com\",\n    messagingSenderId: \"911978695691\",\n    appId: \"1:911978695691:web:3bd7a8e23111df296f4b0e\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, {Component} from 'react';\n\nclass Feelings extends Component {\n    constructor() {\n        super();\n        this.state = {\n            classNames: [\n                \"feelings-small\",\n                \"feelings-medium\",\n                \"feelings-big\"\n            ]\n        }\n      }\n \n    render() {\n    const groupedFeelings = [];\n      return(\n        <section className=\"feelings\">\n            <div className=\"wrapper\">\n                <h2>HELLO FEELINGS</h2>\n                {this.props.feelings.map((obj) => {\n                    const existingFeeling = groupedFeelings[obj.feeling];\n                    if(existingFeeling){\n                        existingFeeling.push(obj)\n                    } else {\n                        groupedFeelings[obj.feeling] = [obj];\n                    return (<li key={obj.feeling}><button className=\"feeling-button\" onClick={(e) => {this.props.handleModal(e); this.props.handleMoreInfo(e, obj.feeling)}}>{obj.feeling}</button></li> )\n                    }\n                })\n                }\n            </div>\n        </section>\n      )\n   }\n}\n\nexport default Feelings;","import React, {Component, Fragment} from 'react';\nimport firebase from './firebase.js';\n\nclass Form extends Component {\n  constructor() {\n      super();\n      this.state = {\n        userTeam: '',\n        userFeeling: '',\n        userInfo: '',\n        userPositive: '',\n        error: 'üôÉ'\n      }\n  }\n    handleInputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.userTeam) {\n            this.setState({\n                error: \"Please complete team field\"\n            })\n        } else if (!this.state.userFeeling) {\n            this.setState({\n                error: \"Please complete feeling field\"\n            })\n        } else if (!this.state.userInfo) {\n            this.setState({\n                error: \"Please complete info field\"\n            })\n        } else if (!this.state.userPositive) {\n            this.setState({\n                error: \"Please indicate if your feeling is positive or negative\"\n            })\n        } else {\n            this.props.handleModal(e);\n            const isPositive = this.state.userPositive === \"true\" ? true : false;\n            this.setState({\n                userPositive: isPositive,\n            })\n            const dbRef = firebase.database().ref();\n            dbRef.push(this.state);\n            this.setState({\n                userTeam: '',\n                userFeeling: '',\n                userInfo: '',\n                userPositive: '',\n                error: 'üôÉ'\n            })\n        }\n    }\n  render() {\n      const {userTeam, userFeeling, userInfo, userPositive} = this.state;\n      return(\n          <Fragment>\n            <h2>How are you feeling today?</h2>\n            <hr/>\n            <form>\n                <label htmlFor=\"userTeam\">Team:</label>\n                <input type=\"text\" name=\"userTeam\" placeholder=\"Team\" value={userTeam} onChange={this.handleInputChange}/>\n                <label htmlFor=\"userFeeling\">Your feeling in one word:</label>\n                <input type=\"text\" name=\"userFeeling\" placeholder=\"Feeling\" value={userFeeling} onChange={this.handleInputChange}/>\n                <fieldset onChange={this.handleInputChange} value={userPositive}>\n                    <legend htmlFor=\"userPositive\">Is this feeling positive or negative?</legend>\n                    <input className=\"sr-only\" type=\"radio\" name=\"userPositive\" id=\"positive-true\" value=\"true\"/>\n                    <label className=\"emoji\" htmlFor=\"positive-true\">üëç</label>\n                    <input className=\"sr-only\" type=\"radio\" name=\"userPositive\" id=\"positive-false\" value=\"false\"/>\n                    <label className=\"emoji\" htmlFor=\"positive-false\">üëé</label>\n                </fieldset>\n                <label htmlFor=\"userInfo\">What is causing this feeling?</label>\n                <input type=\"text\" name=\"userInfo\" placeholder=\"Why\" value={userInfo} onChange={this.handleInputChange}/>\n                <button onClick={this.handleSubmit}>SUBMIT</button>\n            </form>\n            <p><span>{this.state.error}</span></p>\n          </Fragment>\n      )\n   }\n}\n\nexport default Form;\n","import React, {Component, Fragment} from 'react';\n\nclass MoreInfo extends Component {\n\n  render() {\n      return(\n        <Fragment>\n            <h2>HELLO I AM MORE INFO</h2>\n            <hr/>\n            <p>Info content here</p>\n        </Fragment>\n            // populate descriptions in modal\n    // define h2 with {feeling}\n    // spread feeling description object, map through feeling instances to display as p in li\n    // add button to resolve feeling in LI\n      )\n   }\n}\n\nexport default MoreInfo;\n","import React, {Component, Fragment} from 'react';\nimport Form from './Form.js';\nimport MoreInfo from './MoreInfo.js';\n\nclass Modal extends Component {\n\n  render() {\n      return(\n        <Fragment>\n            <div className=\"modal\">\n                <div className=\"modal__foreground\">\n                    <button className=\"modal__close\" onClick={this.props.handleModal}>CLOSE</button>\n                    {this.props.displayForm ? <Form handleModal={this.props.handleModal}/> : <MoreInfo/>}\n                </div>\n            </div>\n        </Fragment>\n      )\n   }\n}\n\nexport default Modal;\n","import React, {Component, Fragment} from 'react';\nimport firebase from './firebase.js';\nimport Feelings from './Feelings.js';\nimport Modal from './Modal.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      feelings: [],\n      displayModal: false,\n      displayForm: false\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const newFeelings = [];\n      const data = response.val();\n      for(let key in data) {\n        let results = data[key];\n        newFeelings.push({\n            feeling: results.userFeeling, \n            team: results.userTeam,\n            id: key,\n            info: results.userInfo\n        })\n        }\n        this.setState({\n          feelings: newFeelings\n        })\n    })\n  }\n  handleModal = (e) => {\n    e.preventDefault();\n    this.setState({displayModal: !this.state.displayModal})\n  }\n  handleForm = (e) => {\n    e.preventDefault();\n    this.setState({displayForm: true})\n  }\n  handleMoreInfo = (e, name) => {\n    e.preventDefault();\n    this.setState({displayForm: false});\n    console.log(name);\n    // filter state using name\n    // return info values in modal\n  }\n  \n  render() {\n    return(\n      <Fragment>\n        <header>\n          <div className=\"wrapper head\">\n            <h1>Better Feedback</h1>\n            <button className=\"head__button\" onClick={(e) => {this.handleModal(e); this.handleForm(e)}}>Add Feedback</button>\n          </div>\n        </header>\n        <main>\n          {this.state.displayModal ? <Modal handleModal={this.handleModal} displayForm={this.state.displayForm}/> : null}\n          <Feelings feelings={this.state.feelings} handleModal={this.handleModal} handleMoreInfo={this.handleMoreInfo}/>\n        </main>\n        <footer>\n          <div className=\"wrapper foot\">\n            <p><a href=\"https://katm.dev\">Kat DeVrieze</a> 2020</p>\n          </div>\n        </footer>\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}